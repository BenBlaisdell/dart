AWSTemplateFormatVersion: 2010-09-09
Description: Creates a Dart environment


Parameters:

    # external resource paths

    DartTemplateS3DirectoryPath:
        Type: String
        Description: The S3 path to the directory containing Dart Cloudformation templates

    DartConfigS3Path:
        Type: String
        Description: Path to this environment's config file on S3
        AllowedPattern: 's3://\\S+/\\S+[.]yaml'

    # dart parameters

    DartTag:
        Type: String
        Description: String to indicate a resource is part of Dart
        AllowedPattern: '[a-z0-9-]+'
        Default: dart

    DartEnv:
        Type: String
        Description: The type of environment to create
        AllowedValues:
            - prod
            - stage

    DartAlertsEmailAddress:
        Type: String
        Description: The email address where alerts about Dart's resources will be sent

    DatabaseUsername:
        Type: String

    DatabasePassword:
        Type: String
        AllowedPattern: '[a-zA-Z0-9]*'
        MinLength: 5
        MaxLength: 20
        NoEcho: true

    # aws parameters

    DartKeyName:
        Type: AWS::EC2::KeyPair::KeyName

    VpcId:
        Type: AWS::EC2::VPC::Id

    VpcSubnetIds:
        Type: List<AWS::EC2::Subnet::Id>

    AvailabilityZones:
        Type: List<AWS::EC2::AvailabilityZone::Name>

    OpenCidrIp1:
        Type: String
        Description: Cidr block that is open on 22 and 8080 to be allowed in Dart's security group

    OpenCidrIp2:
        Type: String
        Description: Cidr block that is open on 22 and 8080 to be allowed in Dart's security group

    HostedZoneName:
        Type: String

    RecordSetName:
        Type: String

    # service image versions

    NginxVersion:
        Type: String
        AllowedPattern: '\\d+[.]\\d+[.]\\d+'

    FlaskVersion:
        Type: String
        AllowedPattern: '\\d+[.]\\d+[.]\\d+'

    EngineTaskrunnerVersion:
        Type: String
        AllowedPattern: '\\d+[.]\\d+[.]\\d+'

    EngineWorkerVersion:
        Type: String
        AllowedPattern: '\\d+[.]\\d+[.]\\d+'

    SubscriptionWorkerVersion:
        Type: String
        AllowedPattern: '\\d+[.]\\d+[.]\\d+'

    TriggerWorkerVersion:
        Type: String
        AllowedPattern: '\\d+[.]\\d+[.]\\d+'


Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups: 
          - Label: { default: External resource paths }
            Parameters:
              - DartTemplateS3DirectoryPath
          - Label: { default: Dart parameters }
            Parameters:
              - DartTag
              - DartEnv
              - DartAlertsEmailAddress
              - DatabaseUsername
              - DatabasePassword
          - Label: { default: AWS parameters }
            Parameters:
              - DartKeyName
              - VpcId
              - VpcSubnetIds
              - AvailabilityZones
              - OpenCidrIp1
              - OpenCidrIp2
              - HostedZoneName
          - Label: { default: Service image versions }
            Parameters:
              - NginxVersion
              - FlaskVersion
              - EngineTaskrunnerVersion
              - EngineWorkerVersion
              - SubscriptionWorkerVersion
              - TriggerWorkerVersion


Resources:

    # Logging

    DartLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub ${DartTag}-${DartEnv}-log-group
            LogRetentionInDays: !FindInMap [ EnvMap, !Ref DartEnv, LogRetentionInDays ]

    # Subscription queue

    SubscriptionQueue:
        Type: AWS::SQS::Queue

    SubscriptionQueuePolicy:
        Type: AWS::SQS::QueuePolicy
        Properties:
            Queues: [ !Ref SubscriptionQueueName ]
            PolicyDocument:
                Version: 2012-10-17
                Id: dart-subscription-sqs-policy
                Statement:
                  - Sid: dart-subscription-allow-dart-data-s3-object-creation-events
                    Effect: Allow
                    Principal: { AWS: "*" }
                    Action: SQS:SendMessage
                    Resource: !Ref SubscriptionQueueArn
                    Condition: { ArnEquals: { 'aws:SourceArn': !Ref ObjectCreationEventsSNSTopic } }

    # Trigger queue

    TriggerQueue:
        Type: AWS::SQS::Queue

    TriggerQueuePolicy:
        Type: AWS::SQS::QueuePolicy
        Properties:
            Queues: [ !Ref TriggerQueue ]
            PolicyDocument:
                Version: 2012-10-17
                Id: dart-trigger-sqs-policy
                Statement:
                  - Sid: allow-cloudwatch-scheduled-events
                    Effect: Allow
                    Principal: '*'
                    Action: SQS:SendMessage
                    Resource: !GetAtt TriggerQueue
                    Condition: { ArnEquals: { 'aws:SourceArn': !Ref CloudWatchScheduledEventsTopic } }

    CloudwatchScheduledEventsTopic:
        Type: AWS::SNS::Topic
        Properties:
            DisplayName: !Sub ${DartTag}-${DartEnv}-cloudwatch-scheduled-events
            TopicName: !Sub ${DartTag}-${DartEnv}-cloudwatch-scheduled-events
            Subscription:
              - Endpoint: !GetAtt TriggerQueue
                Protocol: sqs

    CloudWatchScheduledEventsTopicPolicy:
        Type: AWS::SNS::TopicPolicy
        Properties:
            Topics: [ !Ref CloudWatchScheduledEventsTopic ]
            PolicyDocument:
                Version: 2012-10-17
                Id: !Sub ${DartTag}-${DartEnv}-cloudwatch-scheduled-events
                Statement:
                  - Sid: allow-same-account-actions
                    Effect: Allow
                    Principal: { AWS: '*' }
                    Action:
                      - SNS:Subscribe
                      - SNS:ListSubscriptionsByTopic
                      - SNS:DeleteTopic
                      - SNS:GetTopicAttributes
                      - SNS:Publish
                      - SNS:RemovePermission
                      - SNS:AddPermission
                      - SNS:Receive
                      - SNS:SetTopicAttributes
                    Resource: !Ref CloudWatchScheduledEventsTopic
                    Condition: { StringEquals: { 'AWS:SourceOwner': !Ref 'AWS::AccountId' } }
                  - Sid: allow-aws-events-publish
                    Effect: Allow
                    Principal: { Service: events.amazonaws.com }
                    Action: sns:Publish
                    Resource: !Ref CloudWatchScheduledEventsTopic

    DartSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Sub Dart ${DartEnv} security group
            VpcId: !Ref VpcId
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 10.0.0.0/8
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 172.16.0.0/12
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: !Ref OpenCidrIp1
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: !Ref OpenCidrIp2

    IamStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Join [ /, [ !Ref DartTemplateS3DirectoryPath, iam.yaml ] ]
            Parameters:
                DartLogGroupArn: !GetAtt LogStack.Outputs.DartLogGroupArn
                TriggerQueueArn: !GetAtt SqsStack.Outputs.TriggerQueueArn
                SubscriptionQueueArn: !GetAtt SqsStack.Outputs.SubscriptionQueueArn
                S3ConfigBucketName: !GetAtt S3Stack.Outputs.S3ConfigBucketName
                S3DataBucketName: !GetAtt S3Stack.Outputs.S3DataBucketName

    # KMS Customer Managed Key

    DartKey:
        Type: AWS::KMS::Key
        Properties: 
            Description: !Sub CMK for Dart ${DartEnv}
            KeyPolicy:
                Version: 2012-10-17
                Id: !Sub ${DartTag}-${DartEnv}-key-policy
                Statement:
                  - Sid: Enable IAM User Permissions
                    Effect: Allow
                    Principal: { AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root' }
                    Action: kms:*
                    Resource: '*'
                  - Sid: Allow access for Key Administrators
                    Effect: Allow
                    Principal: { AWS: !ImportValue DartAdminRoleArn }
                    Action:
                      - kms:Describe*
                      - kms:Put*
                      - kms:Create*
                      - kms:Update*
                      - kms:Enable*
                      - kms:Revoke*
                      - kms:List*
                      - kms:Disable*
                      - kms:Get*
                      - kms:Delete*
                    Resource: '*'
                  - Sid: Allow use of the key
                    Effect: Allow
                    Principal:
                        AWS:
                          - !ImportValue DartAdminRoleArn
                          - !GetAtt IamStack.Outputs.DartContainerInstanceProfileRoleArn
                    Action:
                      - kms:DescribeKey
                      - kms:GenerateDataKey*
                      - kms:Encrypt
                      - kms:ReEncrypt*
                      - kms:Decrypt
                    Resource: '*'
                  - Sid: Allow attachment of persistent resources
                    Effect: Allow
                    Principal:
                        AWS:
                          - !ImportValue DartAdminRoleArn
                          - !GetAtt IamStack.Outputs.DartContainerInstanceProfileRoleArn
                    Action:
                      - kms:ListGrants
                      - kms:CreateGrant
                      - kms:RevokeGrant
                    Resource: '*'
                    Condition: { Bool: { 'kms:GrantIsForAWSResource': true } }

    DartKeyAlias:
        Type: AWS::KMS::Key
        Properties:
            AliasName: !Sub alias/${DartTag}-${DartEnv}-key
            TargetKeyId: !Ref DartKey

    # Workers

    ServiceCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !DartRef WorkerClusterName

    WebExternalStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Join [ /, [ !Ref DartTemplateS3DirectoryPath, web.yaml ] ]
            Parameters:
                DartEnv: !Ref DartEnv
                VpcSubnetIds: !Ref VpcSubnetIds
                AvailabilityZones: !Ref AvailabilityZones
                DartContainerInstanceProfileName: !GetAtt IamStack.Outputs.DartContainerInstanceProfileName
                DartKeyName: !Ref DartKeyName
                DartSecurityGroupName: !Ref DartSecurityGroup
                WebServiceRoleName: !Ref WebServiceRole
                DartLogGroupName: !GetAtt LogStack.Outputs.DartLogGroupName
                FlaskContainerName: !Sub ${DartTag}-${DartEnv}-Web-External-Flask
                FlaskDockerImage: !Sub https://${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/{DartTag}/flask:${FlaskVersion}
                DartConfig: !Ref DartConfigS3Path
                FlaskVersion: !Ref FlaskVersion
                NginxContainerName: !Sub ${DartTag}-${DartEnv}-Web-External-Nginx
                NginxDockerImage: !Sub https://${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/{DartTag}/nginx:${NginxVersion}
                WebDirection: external
                HostedZoneName: !Ref HostedZoneName
                RecordSetName: !Ref RecordSetName

    WebInternalStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Join [ /, [ !Ref DartTemplateS3DirectoryPath, web.yaml ] ]
            Parameters:
                DartEnv: !Ref DartEnv
                VpcSubnetIds: !Ref VpcSubnetIds
                AvailabilityZones: !Ref AvailabilityZones
                DartContainerInstanceProfileName: !GetAtt IamStack.Outputs.DartContainerInstanceProfileName
                DartKeyName: !Ref DartKeyName
                DartSecurityGroupName: !Ref DartSecurityGroup
                WebServiceRoleName: !Ref WebServiceRole
                DartLogGroupName: !GetAtt LogStack.Outputs.DartLogGroupName
                FlaskContainerName: !Sub ${DartTag}-${DartEnv}-Web-Internal-Flask
                FlaskDockerImage: !Sub https://${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/{DartTag}/flask:${FlaskVersion}
                DartConfig: !Ref DartConfigS3Path
                FlaskVersion: !Ref FlaskVersion
                NginxContainerName: !Sub ${DartTag}-${DartEnv}-Web-Internal-Nginx
                NginxDockerImage: !Sub https://${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/{DartTag}/nginx:${NginxVersion}
                WebDirection: internal
                HostedZoneName: !Ref HostedZoneName
                RecordSetName: !Ref RecordSetName

    EngineWorkerStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Join [ /, [ !Ref DartTemplateS3DirectoryPath, engine-worker.yaml ] ]
            Parameters:
                DartEnv: !Ref DartEnv
                VpcSubnetIds: !Ref VpcSubnetIds
                AvailabilityZones: !Ref AvailabilityZones
                DartContainerInstanceProfileName: !GetAtt IamStack.Outputs.DartContainerInstanceProfileName
                DartKeyName: !Ref DartKeyName
                DartSecurityGroupName: !Ref DartSecurityGroup
                DartLogGroupName: !GetAtt LogStack.Outputs.DartLogGroupName
                EngineWorkerDockerImage: !Sub https://${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/{DartTag}/engine-worker:${EngineWorkerVersion}
                DartConfig: !Ref DartConfigS3Path

    SubscriptionWorkerStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Join [ /, [ !Ref DartTemplateS3DirectoryPath, subscription-worker.yaml ] ]
            Parameters:
                DartEnv: !Ref DartEnv
                VpcSubnetIds: !Ref VpcSubnetIds
                AvailabilityZones: !Ref AvailabilityZones
                DartContainerInstanceProfileName: !GetAtt IamStack.Outputs.DartContainerInstanceProfileName
                DartKeyName: !Ref DartKeyName
                DartSecurityGroupName: !Ref DartSecurityGroup
                DartLogGroupName: !GetAtt LogStack.Outputs.DartLogGroupName
                SubscriptionWorkerDockerImage: !Sub https://${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/{DartTag}/subscription-worker:${SubscriptionWorkerVersion}
                DartConfig: !Ref DartConfigS3Path
                SubscriptionQueueName: !GetAtt SqsStack.Outputs.SubscriptionQueueName

    TriggerWorkerStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Join [ /, [ !Ref DartTemplateS3DirectoryPath, trigger-worker.yaml ] ]
            Parameters:
                DartEnv: !Ref DartEnv
                VpcSubnetIds: !Ref VpcSubnetIds
                AvailabilityZones: !Ref AvailabilityZones
                DartContainerInstanceProfileName: !GetAtt IamStack.Outputs.DartContainerInstanceProfileName
                DartKeyName: !Ref DartKeyName
                DartSecurityGroupName: !Ref DartSecurityGroup
                DartLogGroupName: !GetAtt LogStack.Outputs.DartLogGroupName
                TriggerWorkerDockerImage: !Sub https://${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/{DartTag}/trigger-worker:${TriggerWorkerVersion}
                DartConfig: !Ref DartConfigS3Path

    # Database

    DBInstance:
        Type: AWS::RDS::DBInstance
        DeletionPolicy: Retain
        Properties:
            AllocatedStorage: 10
            DBSubnetGroupName: !Ref DBSubnetGroup
            AvailabilityZone: !Ref AvailabilityZone
            BackupRetentionPeriod: 7
            DBInstanceClass: !FindInMap [ EnvMap, !Ref DartEnv, DBInstanceClass ]
            DBName: dart
            Engine: postgres
            EngineVersion: 9.4.1
            LicenseModel: postgresql-license
            MasterUsername: !Ref DatabaseUsername
            MasterUserPassword: !Ref DatabasePassword
            MultiAZ: false
            Port: 5432
            PreferredBackupWindow: 09:00-09:30
            PreferredMaintenanceWindow: sat:09:31-sat:10:01
            VPCSecurityGroups: [ !Ref DartSecurityGroupName ]

    DBSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupDescription: Dart RDS DBSubnetGroup
            VpcSubnetIds: !Ref VpcSubnetIds

    CpuAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmActions:
            - String
            AlarmDescription: String
            AlarmName: String
            ComparisonOperator: String
            Dimensions:
            - Metric dimension
            EvaluationPeriods: String
            InsufficientDataActions:
            - String
            MetricName: String
            Namespace: String
            OKActions:
            - String
            Period: String
            Statistic: String
            Threshold: String
            Unit: String

    # Taskrunner

    EngineTaskrunnerStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Join [ /, [ !Ref DartTemplateS3DirectoryPath, web.yaml ] ]
            Parameters:
                DartEnv: !Ref DartEnv
                VpcSubnetIds: !Ref VpcSubnetIds
                AvailabilityZones: !Ref AvailabilityZones
                DartContainerInstanceProfileName: !GetAtt IamStack.Outputs.DartContainerInstanceProfileName
                DartKeyName: !Ref DartKeyName
                DartSecurityGroupName: !Ref DartSecurityGroup

    UdsInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: [ Ref: UdsInstanceProfileRole ]

    UdsInstanceProfileRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Action: [ 'sts:AssumeRole' ]
                    Principal: { Service: [ elasticmapreduce.amazonaws.com ] }
            ManagedPolicyArns: [ 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole' ]
            Policies:
              - PolicyName: !Sub get-auth-token
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action: ecr:GetAuthorizationToken
                        Resource: '*'
              - PolicyName: !Sub sqs
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action: sqs:*
                        Resource:
                          - !GetAtt TriggerQueueArn
                          - !GetAtt SubscriptionQueueArn
              - PolicyName: !Sub tags
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action: [ 'ec2:DescribeTags', 'ec2:CreateTags' ]
                        Resource: '*'
              - PolicyName: !Sub s3-bucket-access
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action: s3:*
                        Resource:
                          - !Sub arn:aws:s3:::${S3ConfigBucketName}
                          - !Sub arn:aws:s3:::${S3ConfigBucketName}/*
                          - !Sub arn:aws:s3:::${S3DataBucketName}
                          - !Sub arn:aws:s3:::${S3DataBucketName}/*